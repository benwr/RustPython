'\nopcode module - potentially shared between dis and other modules which\noperate on bytecodes (e.g. peephole optimizers).\n'
_V='version'
_U='func_version'
_T='RESUME'
_S='JUMP_BACKWARD_NO_INTERRUPT'
_R='STORE_FAST'
_Q='LOAD_FAST'
_P='LOAD_CONST'
_O='CALL'
_N='JUMP_BACKWARD'
_M='BINARY_OP'
_L='LOAD_GLOBAL'
_K='JUMP_FORWARD'
_J='COMPARE_OP'
_I='STORE_ATTR'
_H='FOR_ITER'
_G='UNPACK_SEQUENCE'
_F='STORE_SUBSCR'
_E='BINARY_SUBSCR'
_D='EXTENDED_ARG'
_C='LOAD_ATTR'
_B='NOP'
_A='counter'
__all__=['cmp_op','hasarg','hasconst','hasname','hasjrel','hasjabs','haslocal','hascompare','hasfree','hasexc','opname','opmap','HAVE_ARGUMENT',_D]
try:from _opcode import stack_effect;__all__.append('stack_effect')
except ImportError:pass
cmp_op='<','<=','==','!=','>','>='
hasarg=[]
hasconst=[]
hasname=[]
hasjrel=[]
hasjabs=[]
haslocal=[]
hascompare=[]
hasfree=[]
hasexc=[]
def is_pseudo(op):return op>=MIN_PSEUDO_OPCODE and op<=MAX_PSEUDO_OPCODE
oplists=[hasarg,hasconst,hasname,hasjrel,hasjabs,haslocal,hascompare,hasfree,hasexc]
opmap={}
_pseudo_ops={}
def def_op(name,op):opmap[name]=op
def name_op(name,op):def_op(name,op);hasname.append(op)
def jrel_op(name,op):def_op(name,op);hasjrel.append(op)
def jabs_op(name,op):def_op(name,op);hasjabs.append(op)
def pseudo_op(name,op,real_ops):
	A=real_ops;def_op(name,op);_pseudo_ops[name]=A
	for B in oplists:
		C=[opmap[A]in B for A in A]
		if any(C):assert all(C);B.append(op)
def_op('CACHE',0)
def_op('POP_TOP',1)
def_op('PUSH_NULL',2)
def_op(_B,9)
def_op('UNARY_POSITIVE',10)
def_op('UNARY_NEGATIVE',11)
def_op('UNARY_NOT',12)
def_op('UNARY_INVERT',15)
def_op(_E,25)
def_op('BINARY_SLICE',26)
def_op('STORE_SLICE',27)
def_op('GET_LEN',30)
def_op('MATCH_MAPPING',31)
def_op('MATCH_SEQUENCE',32)
def_op('MATCH_KEYS',33)
def_op('PUSH_EXC_INFO',35)
def_op('CHECK_EXC_MATCH',36)
def_op('CHECK_EG_MATCH',37)
def_op('WITH_EXCEPT_START',49)
def_op('GET_AITER',50)
def_op('GET_ANEXT',51)
def_op('BEFORE_ASYNC_WITH',52)
def_op('BEFORE_WITH',53)
def_op('END_ASYNC_FOR',54)
def_op('CLEANUP_THROW',55)
def_op(_F,60)
def_op('DELETE_SUBSCR',61)
def_op('YIELD_FROM',72)
def_op('GET_ITER',68)
def_op('GET_YIELD_FROM_ITER',69)
def_op('PRINT_EXPR',70)
def_op('LOAD_BUILD_CLASS',71)
def_op('LOAD_ASSERTION_ERROR',74)
def_op('RETURN_GENERATOR',75)
def_op('LIST_TO_TUPLE',82)
def_op('RETURN_VALUE',83)
def_op('IMPORT_STAR',84)
def_op('SETUP_ANNOTATIONS',85)
def_op('ASYNC_GEN_WRAP',87)
def_op('PREP_RERAISE_STAR',88)
def_op('POP_EXCEPT',89)
HAVE_ARGUMENT=90
name_op('STORE_NAME',90)
name_op('DELETE_NAME',91)
def_op(_G,92)
jrel_op(_H,93)
def_op('UNPACK_EX',94)
name_op(_I,95)
name_op('DELETE_ATTR',96)
name_op('STORE_GLOBAL',97)
name_op('DELETE_GLOBAL',98)
def_op('SWAP',99)
def_op(_P,100)
hasconst.append(100)
name_op('LOAD_NAME',101)
def_op('BUILD_TUPLE',102)
def_op('BUILD_LIST',103)
def_op('BUILD_SET',104)
def_op('BUILD_MAP',105)
name_op(_C,106)
def_op(_J,107)
hascompare.append(107)
name_op('IMPORT_NAME',108)
name_op('IMPORT_FROM',109)
jrel_op(_K,110)
jrel_op('JUMP_IF_FALSE_OR_POP',111)
jrel_op('JUMP_IF_TRUE_OR_POP',112)
jrel_op('POP_JUMP_IF_FALSE',114)
jrel_op('POP_JUMP_IF_TRUE',115)
name_op(_L,116)
def_op('IS_OP',117)
def_op('CONTAINS_OP',118)
def_op('RERAISE',119)
def_op('COPY',120)
def_op(_M,122)
jrel_op('SEND',123)
def_op(_Q,124)
haslocal.append(124)
def_op(_R,125)
haslocal.append(125)
def_op('DELETE_FAST',126)
haslocal.append(126)
def_op('LOAD_FAST_CHECK',127)
haslocal.append(127)
jrel_op('POP_JUMP_IF_NOT_NONE',128)
jrel_op('POP_JUMP_IF_NONE',129)
def_op('RAISE_VARARGS',130)
def_op('GET_AWAITABLE',131)
def_op('MAKE_FUNCTION',132)
def_op('BUILD_SLICE',133)
jrel_op(_S,134)
def_op('MAKE_CELL',135)
hasfree.append(135)
def_op('LOAD_CLOSURE',136)
hasfree.append(136)
def_op('LOAD_DEREF',137)
hasfree.append(137)
def_op('STORE_DEREF',138)
hasfree.append(138)
def_op('DELETE_DEREF',139)
hasfree.append(139)
jrel_op(_N,140)
def_op('CALL_FUNCTION_EX',142)
def_op(_D,144)
EXTENDED_ARG=144
def_op('LIST_APPEND',145)
def_op('SET_ADD',146)
def_op('MAP_ADD',147)
def_op('LOAD_CLASSDEREF',148)
hasfree.append(148)
def_op('COPY_FREE_VARS',149)
def_op('YIELD_VALUE',150)
def_op(_T,151)
def_op('MATCH_CLASS',152)
def_op('FORMAT_VALUE',155)
def_op('BUILD_CONST_KEY_MAP',156)
def_op('BUILD_STRING',157)
def_op('LIST_EXTEND',162)
def_op('SET_UPDATE',163)
def_op('DICT_MERGE',164)
def_op('DICT_UPDATE',165)
def_op(_O,171)
def_op('KW_NAMES',172)
hasconst.append(172)
hasarg.extend([A for A in opmap.values()if A>=HAVE_ARGUMENT])
MIN_PSEUDO_OPCODE=256
pseudo_op('SETUP_FINALLY',256,[_B])
hasexc.append(256)
pseudo_op('SETUP_CLEANUP',257,[_B])
hasexc.append(257)
pseudo_op('SETUP_WITH',258,[_B])
hasexc.append(258)
pseudo_op('POP_BLOCK',259,[_B])
pseudo_op('JUMP',260,[_K,_N])
pseudo_op('JUMP_NO_INTERRUPT',261,[_K,_S])
pseudo_op('LOAD_METHOD',262,[_C])
MAX_PSEUDO_OPCODE=MIN_PSEUDO_OPCODE+len(_pseudo_ops)-1
del def_op,name_op,jrel_op,jabs_op,pseudo_op
opname=['<%r>'%(A,)for A in range(MAX_PSEUDO_OPCODE+1)]
for(op,i)in opmap.items():opname[i]=op
_nb_ops=[('NB_ADD','+'),('NB_AND','&'),('NB_FLOOR_DIVIDE','//'),('NB_LSHIFT','<<'),('NB_MATRIX_MULTIPLY','@'),('NB_MULTIPLY','*'),('NB_REMAINDER','%'),('NB_OR','|'),('NB_POWER','**'),('NB_RSHIFT','>>'),('NB_SUBTRACT','-'),('NB_TRUE_DIVIDE','/'),('NB_XOR','^'),('NB_INPLACE_ADD','+='),('NB_INPLACE_AND','&='),('NB_INPLACE_FLOOR_DIVIDE','//='),('NB_INPLACE_LSHIFT','<<='),('NB_INPLACE_MATRIX_MULTIPLY','@='),('NB_INPLACE_MULTIPLY','*='),('NB_INPLACE_REMAINDER','%='),('NB_INPLACE_OR','|='),('NB_INPLACE_POWER','**='),('NB_INPLACE_RSHIFT','>>='),('NB_INPLACE_SUBTRACT','-='),('NB_INPLACE_TRUE_DIVIDE','/='),('NB_INPLACE_XOR','^=')]
_specializations={_M:['BINARY_OP_ADAPTIVE','BINARY_OP_ADD_FLOAT','BINARY_OP_ADD_INT','BINARY_OP_ADD_UNICODE','BINARY_OP_INPLACE_ADD_UNICODE','BINARY_OP_MULTIPLY_FLOAT','BINARY_OP_MULTIPLY_INT','BINARY_OP_SUBTRACT_FLOAT','BINARY_OP_SUBTRACT_INT'],_E:['BINARY_SUBSCR_ADAPTIVE','BINARY_SUBSCR_DICT','BINARY_SUBSCR_GETITEM','BINARY_SUBSCR_LIST_INT','BINARY_SUBSCR_TUPLE_INT'],_O:['CALL_ADAPTIVE','CALL_PY_EXACT_ARGS','CALL_PY_WITH_DEFAULTS','CALL_BOUND_METHOD_EXACT_ARGS','CALL_BUILTIN_CLASS','CALL_BUILTIN_FAST_WITH_KEYWORDS','CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS','CALL_NO_KW_BUILTIN_FAST','CALL_NO_KW_BUILTIN_O','CALL_NO_KW_ISINSTANCE','CALL_NO_KW_LEN','CALL_NO_KW_LIST_APPEND','CALL_NO_KW_METHOD_DESCRIPTOR_FAST','CALL_NO_KW_METHOD_DESCRIPTOR_NOARGS','CALL_NO_KW_METHOD_DESCRIPTOR_O','CALL_NO_KW_STR_1','CALL_NO_KW_TUPLE_1','CALL_NO_KW_TYPE_1'],_J:['COMPARE_OP_ADAPTIVE','COMPARE_OP_FLOAT_JUMP','COMPARE_OP_INT_JUMP','COMPARE_OP_STR_JUMP'],_D:['EXTENDED_ARG_QUICK'],_H:['FOR_ITER_ADAPTIVE','FOR_ITER_LIST','FOR_ITER_RANGE'],_N:['JUMP_BACKWARD_QUICK'],_C:['LOAD_ATTR_ADAPTIVE','LOAD_ATTR_CLASS','LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN','LOAD_ATTR_INSTANCE_VALUE','LOAD_ATTR_MODULE','LOAD_ATTR_PROPERTY','LOAD_ATTR_SLOT','LOAD_ATTR_WITH_HINT','LOAD_ATTR_METHOD_LAZY_DICT','LOAD_ATTR_METHOD_NO_DICT','LOAD_ATTR_METHOD_WITH_DICT','LOAD_ATTR_METHOD_WITH_VALUES'],_P:['LOAD_CONST__LOAD_FAST'],_Q:['LOAD_FAST__LOAD_CONST','LOAD_FAST__LOAD_FAST'],_L:['LOAD_GLOBAL_ADAPTIVE','LOAD_GLOBAL_BUILTIN','LOAD_GLOBAL_MODULE'],_T:['RESUME_QUICK'],_I:['STORE_ATTR_ADAPTIVE','STORE_ATTR_INSTANCE_VALUE','STORE_ATTR_SLOT','STORE_ATTR_WITH_HINT'],_R:['STORE_FAST__LOAD_FAST','STORE_FAST__STORE_FAST'],_F:['STORE_SUBSCR_ADAPTIVE','STORE_SUBSCR_DICT','STORE_SUBSCR_LIST_INT'],_G:['UNPACK_SEQUENCE_ADAPTIVE','UNPACK_SEQUENCE_LIST','UNPACK_SEQUENCE_TUPLE','UNPACK_SEQUENCE_TWO_TUPLE']}
_specialized_instructions=[B for A in _specializations.values()for B in A]
_specialization_stats=['success','failure','hit','deferred','miss','deopt']
_cache_format={_L:{_A:1,'index':1,'module_keys_version':2,'builtin_keys_version':1},_M:{_A:1},_G:{_A:1},_J:{_A:1,'mask':1},_E:{_A:1,'type_version':2,_U:1},_H:{_A:1},_C:{_A:1,_V:2,'keys_version':2,'descr':4},_I:{_A:1,_V:2,'index':1},_O:{_A:1,_U:2,'min_args':1},_F:{_A:1}}
_inline_cache_entries=[sum(_cache_format.get(opname[A],{}).values())for A in range(256)]